class Solution {
    void inorder(TreeNode root,ArrayList<Integer> temp){
        if(root!=null){
            inorder(root.left,temp);
            temp.add(root.val);
            inorder(root.right,temp);
        }
    }
    public boolean isValidBST(TreeNode root) {
        ArrayList<Integer> temp=new ArrayList<>();
        inorder(root,temp);
        for(int i=0;i<temp.size()-1;i++){
            if(temp.get(i+1)<=temp.get(i)){
            return false;
            }
        }
        return true;
    }
}

//optimal approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public boolean isValidBST(TreeNode root) {
      return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    
    public boolean isValidBST(TreeNode root, long minVal, long maxVal) {
        // Base case: A null node is considered a valid BST.
        if (root == null) {
            return true;
        }

        // The current node's value must be strictly within the (minVal, maxVal) range.
        if (root.val >= maxVal || root.val <= minVal) {
            return false;
        }
        return isValidBST(root.left, minVal, root.val) 
            && isValidBST(root.right, root.val, maxVal);
    }
}